import os
import datetime
import re

class RecordType:
    FLOAT = 'float'
    STRING = 'string'
    LIST = 'list'
    INTEGER = 'int'
    BOOLEAN = 'bool'

RecordTypeList = [vars(RecordType)[v] for v in dir(RecordType) if not v.startswith('__')]

# Constants

ENUM_RECORD = "enum"
CLASS_RECORD = "class"
MABEL_VERSION = '0.1'
MABEL_GEN_HEADER = """/*
 * WARNING! This file was autogenerated.  Do not modify it!
 * 
 * Created using github.com/federicotdn/mabel, version: {version}.
 * Creation date: {date}
 * Base: {base}
 */

"""

LIST_REGEX = re.compile('^' + RecordType.LIST + '<\S+>$')

def open_file_path(directory, filename):
    path = os.path.join(directory, filename)
    return open(path, 'w+')

def create_base_file(directory, base, extension):
    f = open_file_path(directory, base + extension)
    header = MABEL_GEN_HEADER.format(date=str(datetime.datetime.now()),
                                    base=base,
                                    version=MABEL_VERSION)
    f.write(header)
    return f

def incr_indent(s):
    tmp = ''
    for part in s.splitlines():
        tmp += '\t' + part + '\n'
    return tmp

def is_list(type_str):
    return bool(LIST_REGEX.match(type_str))

def get_list_type(type_str):
    if not is_list(type_str):
        raise Exception('Type is not a list.')

    subtype = type_str[5:-1]
    if is_list(subtype):
        raise Exception('Nested lists are not supported.')

    return subtype

def get_real_type(type_str, type_map):
    if type_str in RecordTypeList:
        return type_map[type_str]

    if is_list(type_str):
        subtype = get_list_type(type_str)
        list_str = type_map[RecordType.LIST]
        return list_str + '<' + get_real_type(subtype, type_map) + '>'

    return type_str