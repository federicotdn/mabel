import json
import os
import datetime
import enum
import re

# Constants

ENUM_RECORD = "enum"
CLASS_RECORD = "class"
MABEL_VERSION = '0.1'
MABEL_GEN_HEADER = """/*
 * WARNING! This file was autogenerated.  Do not modify it!
 * 
 * Created using github.com/federicotdn/mabel, version: {version}.
 * Creation date: {date}
 * Base: {base}
 */

"""

LIST_REGEX = re.compile('^list<\S+>$')

def json_from_path(path):
    with open(path) as f:
        return json.load(f)

def open_file_path(directory, filename):
    path = os.path.join(directory, filename)
    return open(path, 'w+')

def create_base_file(directory, base, extension):
    f = open_file_path(directory, base + extension)
    header = MABEL_GEN_HEADER.format(date=str(datetime.datetime.now()),
                                    base=base,
                                    version=MABEL_VERSION)
    f.write(header)
    return f

def incr_indent(s):
    tmp = ''
    for part in s.splitlines():
        tmp += '\t' + part + '\n'
    return tmp

def is_list(type_str):
    return bool(LIST_REGEX.match(type_str))

def get_real_type(type_str, type_map):
    dep = None

    if type_str in type_map:
        return (type_map[type_str], dep)

    if is_list(type_str):
        list_type = type_str[5:-1] # type_str can be, for example, list<int>

        if list_type == 'list':
            raise Exception('Invalid list type: lispt')
        elif list_type in type_map:
            list_type = type_map[list_type]
        else:
            dep = list_type

        real_list_type = type_map['list']
        return (real_list_type + '<' + list_type + '>', dep)
    
    return (type_str, type_str)
